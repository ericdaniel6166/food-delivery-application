// Code generated by "enumer -type=AppRole -json"; DO NOT EDIT.

package common

import (
	"encoding/json"
	"fmt"
	"strings"
)

const (
	_AppRoleName_0      = "UserShipper"
	_AppRoleLowerName_0 = "usershipper"
	_AppRoleName_1      = "Admin"
	_AppRoleLowerName_1 = "admin"
)

var (
	_AppRoleIndex_0 = [...]uint8{0, 4, 11}
	_AppRoleIndex_1 = [...]uint8{0, 5}
)

func (i AppRole) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _AppRoleName_0[_AppRoleIndex_0[i]:_AppRoleIndex_0[i+1]]
	case i == 4:
		return _AppRoleName_1
	default:
		return fmt.Sprintf("AppRole(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AppRoleNoOp() {
	var x [1]struct{}
	_ = x[User-(1)]
	_ = x[Shipper-(2)]
	_ = x[Admin-(4)]
}

var _AppRoleValues = []AppRole{User, Shipper, Admin}

var _AppRoleNameToValueMap = map[string]AppRole{
	_AppRoleName_0[0:4]:       User,
	_AppRoleLowerName_0[0:4]:  User,
	_AppRoleName_0[4:11]:      Shipper,
	_AppRoleLowerName_0[4:11]: Shipper,
	_AppRoleName_1[0:5]:       Admin,
	_AppRoleLowerName_1[0:5]:  Admin,
}

var _AppRoleNames = []string{
	_AppRoleName_0[0:4],
	_AppRoleName_0[4:11],
	_AppRoleName_1[0:5],
}

// AppRoleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AppRoleString(s string) (AppRole, error) {
	if val, ok := _AppRoleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AppRoleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AppRole values", s)
}

// AppRoleValues returns all values of the enum
func AppRoleValues() []AppRole {
	return _AppRoleValues
}

// AppRoleStrings returns a slice of all String values of the enum
func AppRoleStrings() []string {
	strs := make([]string, len(_AppRoleNames))
	copy(strs, _AppRoleNames)
	return strs
}

// IsAAppRole returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AppRole) IsAAppRole() bool {
	for _, v := range _AppRoleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AppRole
func (i AppRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AppRole
func (i *AppRole) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AppRole should be a string, got %s", data)
	}

	var err error
	*i, err = AppRoleString(s)
	return err
}
