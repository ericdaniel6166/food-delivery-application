// Code generated by "enumer -type=JobState -json -sql -transform=snake-upper"; DO NOT EDIT.

package asyncjob

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _JobStateName = "STATE_INITSTATE_RUNNINGSTATE_FAILEDSTATE_TIMEOUTSTATE_COMPLETEDSTATE_RETRY_FAILED"

var _JobStateIndex = [...]uint8{0, 10, 23, 35, 48, 63, 81}

const _JobStateLowerName = "state_initstate_runningstate_failedstate_timeoutstate_completedstate_retry_failed"

func (i JobState) String() string {
	if i < 0 || i >= JobState(len(_JobStateIndex)-1) {
		return fmt.Sprintf("JobState(%d)", i)
	}
	return _JobStateName[_JobStateIndex[i]:_JobStateIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _JobStateNoOp() {
	var x [1]struct{}
	_ = x[StateInit-(0)]
	_ = x[StateRunning-(1)]
	_ = x[StateFailed-(2)]
	_ = x[StateTimeout-(3)]
	_ = x[StateCompleted-(4)]
	_ = x[StateRetryFailed-(5)]
}

var _JobStateValues = []JobState{StateInit, StateRunning, StateFailed, StateTimeout, StateCompleted, StateRetryFailed}

var _JobStateNameToValueMap = map[string]JobState{
	_JobStateName[0:10]:       StateInit,
	_JobStateLowerName[0:10]:  StateInit,
	_JobStateName[10:23]:      StateRunning,
	_JobStateLowerName[10:23]: StateRunning,
	_JobStateName[23:35]:      StateFailed,
	_JobStateLowerName[23:35]: StateFailed,
	_JobStateName[35:48]:      StateTimeout,
	_JobStateLowerName[35:48]: StateTimeout,
	_JobStateName[48:63]:      StateCompleted,
	_JobStateLowerName[48:63]: StateCompleted,
	_JobStateName[63:81]:      StateRetryFailed,
	_JobStateLowerName[63:81]: StateRetryFailed,
}

var _JobStateNames = []string{
	_JobStateName[0:10],
	_JobStateName[10:23],
	_JobStateName[23:35],
	_JobStateName[35:48],
	_JobStateName[48:63],
	_JobStateName[63:81],
}

// JobStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func JobStateString(s string) (JobState, error) {
	if val, ok := _JobStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _JobStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to JobState values", s)
}

// JobStateValues returns all values of the enum
func JobStateValues() []JobState {
	return _JobStateValues
}

// JobStateStrings returns a slice of all String values of the enum
func JobStateStrings() []string {
	strs := make([]string, len(_JobStateNames))
	copy(strs, _JobStateNames)
	return strs
}

// IsAJobState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i JobState) IsAJobState() bool {
	for _, v := range _JobStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for JobState
func (i JobState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for JobState
func (i *JobState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("JobState should be a string, got %s", data)
	}

	var err error
	*i, err = JobStateString(s)
	return err
}

func (i JobState) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *JobState) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of JobState: %[1]T(%[1]v)", value)
	}

	val, err := JobStateString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
